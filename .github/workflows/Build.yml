on:
  push:
    branches:
      # for bors r+
      - staging
      # for bors try
      - trying
  pull_request:
  workflow_dispatch:
    inputs:
      no_cache:
        description: Disable Docker cache, yes/no
        default: 'no'
        required: false
      toolchain:
        description: Rust toolchain to install
        default: 'stable'
        required: false
  schedule:
    - cron: '0 0 1 */2 *'

name: Build

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      arch: ${{ steps.generate-matrix.outputs.arch }}
      target: ${{ steps.generate-matrix.outputs.target }}
      run-build: ${{ steps.generate-matrix.outputs.run-build }}
    steps:
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm install js-yaml
      - name: Generate matrix
        id: generate-matrix
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const yaml = require('js-yaml')
            const archMatrix = yaml.load(process.env.ARCH_MATRIX)
            const targetMatrix = yaml.load(process.env.TARGET_MATRIX)

            if (context.eventName == 'schedule' || context.eventName == 'workflow_dispatch') {
              // Always run on schedule or workflow_dispatch
              core.setOutput('arch', JSON.stringify(archMatrix))
              core.setOutput('target', JSON.stringify(targetMatrix))
            } else if (context.eventName == 'pull_request') {
              const { data: { labels: labels } } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              })
              const label_names = labels.map(label => label.name)
              const outputArchMatrix = []
              if (label_names.includes('build-amd64')) {
                outputArchMatrix.push(...archMatrix.filter(item => item.arch == 'amd64'))
              }
              if (label_names.includes('build-arm64')) {
                outputArchMatrix.push(...archMatrix.filter(item => item.arch == 'arm64'))
              }
              if (label_names.includes('build-armv7')) {
                outputArchMatrix.push(...archMatrix.filter(item => item.arch == 'armv7'))
              }

              if (outputArchMatrix.length === 0) {
                core.setOutput('arch', JSON.stringify(archMatrix))
                core.setOutput('target', JSON.stringify(targetMatrix))
                core.setOutput('run-build', 'false')
              } else {
                core.setOutput('arch', JSON.stringify(outputArchMatrix))
              }
            } else if (context.eventName == 'push') {
              const commitMessage = process.env.COMMIT_MESSAGE
              if (commitMessage) {
                const outputArchMatrix = []
                const outputTargetMatrix = []
                const borsArgs = commitMessage.replace(/Try #[0-9]+:/i, '').trim()
                const targetIndex = borsArgs.indexOf('--target')
                let dockerArch = []
                let targets = []

                if (targetIndex === -1) {
                  dockerArch = borsArgs.trim().split(' ')
                  targets = []
                } else {
                  dockerArch = borsArgs.substring(0, targetIndex).trim().split(' ')
                  targets = borsArgs.substring(targetIndex + '--target'.length).trim().split(' ')
                }
                if (dockerArch.length === 0) {
                  // Defaults to all arches
                  outputArchMatrix = archMatrix
                } else {
                  for (const arch of dockerArch) {
                    outputArchMatrix.push(...archMatrix.filter(item => item.arch == arch))
                  }
                }
                if (targets.length === 0) {
                  // Defaults to all targets
                  outputTargetMatrix = targetMatrix
                } else {
                  for (const target of targets) {
                    outputTargetMatrix.push(...targetMatrix.filter(item => item.TARGET == target))
                  }
                }

                core.setOutput('arch', JSON.stringify(outputArchMatrix))
                core.setOutput('target', JSON.stringify(outputTargetMatrix))
              } else {
                core.setOutput('arch', JSON.stringify(archMatrix))
                core.setOutput('target', JSON.stringify(targetMatrix))
                core.setOutput('run-build', 'false')
              }
            } else {
              core.setOutput('arch', JSON.stringify(archMatrix))
              core.setOutput('target', JSON.stringify(targetMatrix))
              core.setOutput('run-build', 'false')
            }
      - name: Show build matrix
        run: |
          echo '${{ toJson(steps.generate-matrix.outputs.arch) }}'
          echo '${{ toJson(steps.generate-matrix.outputs.target) }}'
          echo Run build: ${{ steps.generate-matrix.outputs.run-build || 'true' }}
    env:
      COMMIT_MESSAGE: >
        ${{
            ((
              startsWith(github.event.head_commit.message, 'Try #') &&
              github.event.head_commit.author.username == 'bors[bot]'
            ) && github.event.head_commit.message) || ''
          }}
      ARCH_MATRIX: |
        - arch: amd64
        - arch: arm64
        - arch: armv7
          docker_arch: arm/v7
      TARGET_MATRIX: |
        - IMAGE_TAG: aarch64-musl
          TARGET: aarch64-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak
          TOOLCHAIN: stable
        - IMAGE_TAG: arm-musleabi
          TARGET: arm-unknown-linux-musleabi
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: arm-musleabihf
          TARGET: arm-unknown-linux-musleabihf
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: armv5te-musleabi
          TARGET: armv5te-unknown-linux-musleabi
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: armv7-musleabi
          TARGET: armv7-unknown-linux-musleabi
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: armv7-musleabihf
          TARGET: armv7-unknown-linux-musleabihf
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: i586-musl
          TARGET: i586-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: i686-musl
          TARGET: i686-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: mips-musl
          TARGET: mips-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: mips64-muslabi64
          TARGET: mips64-unknown-linux-muslabi64
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: mips64el-muslabi64
          TARGET: mips64el-unknown-linux-muslabi64
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: mipsel-musl
          TARGET: mipsel-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak.32
          TOOLCHAIN: stable
        - IMAGE_TAG: powerpc64le-musl
          TARGET: powerpc64le-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak
          TOOLCHAIN: nightly
        # - IMAGE_TAG: s390x-musl
        #   TARGET: s390x-unknown-linux-musl
        #   RUST_MUSL_MAKE_CONFIG: config.mak
        #   TOOLCHAIN: nightly
        - IMAGE_TAG: x86_64-musl
          TARGET: x86_64-unknown-linux-musl
          RUST_MUSL_MAKE_CONFIG: config.mak
          TOOLCHAIN: stable

  build:
    name: Build - ${{ matrix.os.arch }} - ${{ matrix.env.IMAGE_TAG }}
    runs-on: ubuntu-latest
    if: ${{ needs.setup.outputs.run-build != 'false' }}
    needs: setup
    strategy:
      matrix:
        os: ${{ fromJson(needs.setup.outputs.arch) }}
        env: ${{ fromJson(needs.setup.outputs.target) }}
    env: ${{ matrix.env }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup QEMU
        uses: dbhi/qus/action@main
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: ${{ github.repository_owner == 'messense' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

  conclusion:
    needs: [ build ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Result
        run: |
          jq -C <<< "${needs}"
          # Check if all needs were successful or skipped.
          "$(jq -r 'all(.result as $result | (["success", "skipped"] | contains([$result])))' <<< "${needs}")"
        env:
          needs: ${{ toJson(needs) }}
