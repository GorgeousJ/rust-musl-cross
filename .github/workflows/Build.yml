on:
  pull_request:
  workflow_dispatch:
    inputs:
      no_cache:
        description: Disable Docker cache, yes/no
        default: 'no'
        required: false
      toolchain:
        description: Rust toolchain to install
        default: 'stable'
        required: false
  schedule:
    - cron: '0 0 1 */2 *'

name: Build

jobs:
  build:
    name: Build - ${{ matrix.os.arch }} - ${{ matrix.env.IMAGE_TAG }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          - arch: 'amd64'
          - arch: 'arm64'
          - arch: 'armv7'
            docker_arch: 'arm/v7'
        env:
          - IMAGE_TAG: aarch64-musl
            TARGET: aarch64-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak
            TOOLCHAIN: stable
          - IMAGE_TAG: arm-musleabi
            TARGET: arm-unknown-linux-musleabi
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: arm-musleabihf
            TARGET: arm-unknown-linux-musleabihf
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: armv5te-musleabi
            TARGET: armv5te-unknown-linux-musleabi
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: armv7-musleabi
            TARGET: armv7-unknown-linux-musleabi
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: armv7-musleabihf
            TARGET: armv7-unknown-linux-musleabihf
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: i586-musl
            TARGET: i586-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: i686-musl
            TARGET: i686-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: mips-musl
            TARGET: mips-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: mips64-muslabi64
            TARGET: mips64-unknown-linux-muslabi64
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: mips64el-muslabi64
            TARGET: mips64el-unknown-linux-muslabi64
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: mipsel-musl
            TARGET: mipsel-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak.32
            TOOLCHAIN: stable
          - IMAGE_TAG: powerpc64le-musl
            TARGET: powerpc64le-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak
            TOOLCHAIN: nightly
          # - IMAGE_TAG: s390x-musl
          #   TARGET: s390x-unknown-linux-musl
          #   RUST_MUSL_MAKE_CONFIG: config.mak
          #   TOOLCHAIN: nightly
          - IMAGE_TAG: x86_64-musl
            TARGET: x86_64-unknown-linux-musl
            RUST_MUSL_MAKE_CONFIG: config.mak
            TOOLCHAIN: stable
    env: ${{ matrix.env }}
    outputs:
      run: ${{ steps.should-run.outputs.run }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine skip or not
        id: should-run
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Always run on schedule or workflow_dispatch
            if (context.eventName == 'schedule' || context.eventName == 'workflow_dispatch') {
              core.setOutput('run', 'true')
            } else if (context.eventName == 'pull_request') {
              const { data: { labels: labels } } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              })
              const label_names = labels.map(label => label.name)
              if (label_names.includes('build-amd64') && '${{ matrix.os.arch }}' == 'amd64') {
                core.setOutput('run', 'true')
              } else if (label_names.includes('build-arm64') && '${{ matrix.os.arch }}' == 'arm64') {
                core.setOutput('run', 'true')
              } else if (label_names.includes('build-armv7') && '${{ matrix.os.arch }}' == 'armv7') {
                core.setOutput('run', 'true')
              }
              if (label_names.includes('skip-amd64') && '${{ matrix.os.arch }}' == 'amd64') {
                core.setOutput('run', '')
              } else if (label_names.includes('skip-arm64') && '${{ matrix.os.arch }}' == 'arm64') {
                core.setOutput('run', '')
              } else if (label_names.includes('skip-armv7') && '${{ matrix.os.arch }}' == 'armv7') {
                core.setOutput('run', '')
              }
            } else {
              core.setOutput('run', '')
            }
      - name: Setup QEMU
        if: ${{ steps.should-run.outputs.run }}
        uses: dbhi/qus/action@main
      - name: Setup Docker Buildx
        if: ${{ steps.should-run.outputs.run }}
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: ${{ steps.should-run.outputs.run && github.repository_owner == 'messense' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        if: ${{ steps.should-run.outputs.run }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: docker build
        if: ${{ steps.should-run.outputs.run }}
        uses: docker/build-push-action@v2
        with:
          platforms: linux/${{ matrix.os.docker_arch || matrix.os.arch }}
          build-args: |
            TARGET=${{ matrix.env.TARGET }}
            RUST_MUSL_MAKE_CONFIG=${{ matrix.env.RUST_MUSL_MAKE_CONFIG }}
            TOOLCHAIN=${{ github.event.inputs.toolchain || matrix.env.TOOLCHAIN }}
          tags: ghcr.io/${{ github.repository_owner }}/rust-musl-cross:${{ matrix.env.IMAGE_TAG }}-${{ matrix.os.arch }}
          no-cache: ${{ github.event.inputs.no_cache == 'yes' }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test Docker cargo build
        if: ${{ steps.should-run.outputs.run && matrix.os.arch == 'amd64' && !startsWith(matrix.env.TARGET, 'armv5te') }}
        run: |
          docker run --rm \
            -v "$(pwd)/tests":/home/rust/src \
            ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-${{ matrix.os.arch }} bash -c "cargo build"
      - name: Build and push multiarch image
        if: ${{ steps.should-run.outputs.run }}
        run: |
          set -e

          docker push ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-${{ matrix.os.arch }}
          curl -sqL -o manifest-tool https://github.com/estesp/manifest-tool/releases/download/v1.0.3/manifest-tool-linux-${{ matrix.os.arch }}
          chmod +x manifest-tool

          echo "image: ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG
          manifests:
            - image: ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-amd64
              platform:
                architecture: amd64
                os: linux
            - image: ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-arm64
              platform:
                architecture: arm64
                os: linux
            - image: ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-armv7
              platform:
                architecture: arm/v7
                os: linux
          " > ghcr-manifest.yaml
          ./manifest-tool push from-spec ghcr-manifest.yaml || exit 0
      - name: Sync images to Docker Hub
        if: ${{ steps.should-run.outputs.run && github.repository_owner == 'messense' }}
        run: |
          set -e
          sudo apt-get update
          sudo apt-get -y install skopeo
          skopeo login -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }} ghcr.io
          skopeo login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }} docker.io
          skopeo copy docker://ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-amd64 docker://${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-amd64
          skopeo copy docker://ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-arm64 docker://${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-arm64
          skopeo copy docker://ghcr.io/${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-armv7 docker://${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-armv7

          echo "image: ${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG
          manifests:
            - image: ${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-amd64
              platform:
                architecture: amd64
                os: linux
            - image: ${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-arm64
              platform:
                architecture: arm64
                os: linux
            - image: ${{ github.repository_owner }}/rust-musl-cross:$IMAGE_TAG-armv7
              platform:
                architecture: arm/v7
                os: linux
          " > dockerhub-manifest.yaml

          ./manifest-tool push from-spec dockerhub-manifest.yaml
